%{
#include <stdio.h>
int char_count = 0; // For counting characters
int word_count = 0; // For counting words
int line_count = 0; // For counting lines
%}

%%
[ \t]+           { /* Ignore spaces and tabs */ }
\n               { line_count++; char_count++; }
"//".*           { /* Ignore single-line comments */ }
/\*([^*]|\*+[^*/])*\*+/ { /* Ignore multi-line comments */ }
[a-zA-Z_][a-zA-Z0-9_]{0,31} { printf("Identifier: %s\n", yytext); char_count += yyleng; word_count++; } // Identify words (Identifiers up to 32 chars)
[0-9]+           { printf("Constant: %s\n", yytext); char_count += yyleng; word_count++; } // Count numbers as words
\".*\"           { printf("String Literal: %s\n", yytext); char_count += yyleng; word_count++; } // Count string literals as words
"+"|"-"|"*"|"/"|"=" { printf("Operator: %s\n", yytext); char_count++; } // Identify operators
.                { char_count++; } // Count other characters
%%

int main(int argc, char **argv) {
    if (argc < 2) {
        printf("Usage: %s <source-file>\n", argv[0]);
        return 1;
    }
    FILE *file = fopen(argv[1], "r");
    if (!file) {
        perror("Unable to open file");
        return 1;
    }
    yyin = file;
    yylex(); // Begin lexical analysis
    fclose(file);
    printf("Lines: %d\n", line_count);
    printf("Words: %d\n", word_count);
    printf("Characters: %d\n", char_count);
    return 0;
}

int yywrap() { return 1; }
